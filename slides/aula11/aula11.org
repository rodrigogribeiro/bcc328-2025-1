#+OPTIONS: num:nil toc:nil
#+OPTIONS: date:nil reveal_mathjax:t
#+OPTIONS: tex t
#+OPTIONS: timestamp:nil
#+OPTIONS: org-confirm-babel-evaluate nil
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 1
#+REVEAL_ROOT: file:///home/rodrigo/reveal.js

#+Title: Verificação de tipos
#+Author: Construção de compiladores I


* Objetivos

** Objetivos

- Apresentar a implementação de um verificador de tipos para a linguagem L3

- Mostrar como um sistema de tipos especifica a estrutura de um analisador semântico.

* Motivação

** Motivação

- Na aula anterior, vimos como especificar um sistema de tipos para a linguagem L3.

- Nesta aula, vamos mostrar como transformar essa especificação em uma implementação.

* Verificação de tipos em L3

** Verificação de tipos em L3

- O sistema de tipos de L3, possui regras para comandos e expressões.

- Vamos iniciar com as regras para expressões

** Verificação de tipos em L3

- Representação das regras de tipos para expressões

- $\Gamma \vdash E : T$ é dedutível se a expressão E possui o tipo T no contexto \Gamma.

** Verificação de tipos em L3

- Regras para constantes

\begin{array}{cc}
  \dfrac{}{\Gamma \vdash n : Int} &
  \dfrac{}{\Gamma \vdash s : String} \\ \\
  \dfrac{}{\Gamma \vdash b : Bool} &
\end{array}

** Verificação de tipos em L3

- Vericação de tipos para constantes

#+begin_src haskell
tcValue :: Value -> TcM Ty
tcValue (VInt _) = pure TInt
tcValue (VStr _) = pure TString
tcValue (VBool _) = pure TBool
#+end_src

** Verificação de tipos em L3

- Regra para variáveis

\begin{array}{cc}
  \dfrac{\Gamma(v) = T}{\Gamma \vdash v : T}
\end{array}

** Verificação de tipos em L3

- Consultando um tipo no contexto

#+begin_src haskell
askEnv :: Var -> TcM Ty
askEnv v = do
  r <- gets (Map.lookup v . context)
  case r of
    Nothing -> undefinedVar v
    Just t -> pure t
#+end_src

** Verificação de tipos em L3

- Verificação de tipos de variáveis.

#+begin_src haskell
tcE3 (EVar v Nothing)
  = do
      t <- askEnv v
      pure (EVar v (Just t), t)
#+end_src

** Verificação de tipos em L3

- Operadores binários

#+begin_src haskell
tcBinOp :: (E3 -> E3 -> E3) ->
           (E3, Ty) ->
           (E3, Ty) ->
           Ty -> TcM (E3, Ty)
tcBinOp f (e1, t1) (e2, t2) tf
  = do
      (e1', t1') <-tcE3 e1
      (e2', t2') <- tcE3 e2
      unless (t1 == t1')(incompatibleTypes t1 t1')
      unless (t2 == t2')(incompatibleTypes t2 t2')
      pure (f e1' e2', tf)
#+end_src

** Verificação de tipos em L3

- Operadores binários

#+begin_src haskell
tcE3 (EAdd e1 e2)
  = tcBinOp EAdd (e1, TInt) (e2, TInt) TInt
tcE3 (EMinus e1 e2)
  = tcBinOp EMinus (e1, TInt) (e2, TInt) TInt
tcE3 (EMult e1 e2)
  = tcBinOp EMult (e1, TInt) (e2, TInt) TInt
#+end_src

** Verificação de tipos em L3

- Operações booleanos

\begin{array}{c}
  \dfrac{\Gamma \vdash E_1 : Bool\:\:\:\:\Gamma\vdash E_2 :Bool}
        {\Gamma \vdash E_1 \&\& E_2 : Bool}\\ \\
  \dfrac{\Gamma \vdash E_1 : Bool}
        {\Gamma \vdash !\,E_1 : Bool}\\ \\
\end{array}

** Verificação de tipos em L3

#+begin_src haskell
tcE3 (EAnd e1 e2)
  = tcBinOp EAnd (e1, TBool) (e2, TBool) TBool
tcE3 (ENot e1)
  = do
      (e', t) <- tcE3 e1
      unless (t == TBool)(incompatibleTypes t TBool)
      pure (ENot e', TBool)
#+end_src

** Verificação de tipos em L3

- Operações relacionais

\begin{array}{c}
  \dfrac{\Gamma \vdash E_1 : T\:\:\:\:\Gamma\vdash E_2 : T}
        {\Gamma \vdash E_1 \bullet E_2 : Bool}\\ \\

  \bullet \in \{<,=\}
\end{array}

** Verificação de tipos em L3

#+begin_src haskell
tcE3 (EEq e1 e2)
  = do
      (e1', t1) <- tcE3 e1
      (e2', t2) <- tcE3 e2
      unless (t1 == t2) (incompatibleTypes t1 t2)
      pure (EEq e1' e2', TBool)
#+end_src

** Verificação de tipos em L3

- Operações sobre strings

\begin{array}{c}
  \dfrac{\Gamma \vdash E_1 : String\:\:\:\:\:\Gamma\vdash E_2 : String}
        {\Gamma \vdash strcat(E_1,E_2) : Bool} \\ \\
  \dfrac{\Gamma \vdash E_1 : String}
        {\Gamma \vdash strsize(E_1) : Int} \\ \\
\end{array}

** Verificação de tipos em L3

#+begin_src haskell
tcE3 (ECat e1 e2)
  = tcBinOp ECat (e1, TString) (e2, TString) TString
tcE3 (ESize e1)
  = do
      (e', t) <- tcE3 e1
      unless (t == TString)(incompatibleTypes t TString)
      pure (ESize e', TInt)
#+end_src

** Verificação de tipos em L3

- Conversões de tipos

\begin{array}{cc}
  \dfrac{\Gamma \vdash E_1 : Int}
        {\Gamma \vdash i2s(E_1) : String} &
  \dfrac{\Gamma \vdash E_1 : Int}
        {\Gamma \vdash i2b(E_1) : Bool}
\end{array}

** Verificação de tipos em L3

#+begin_src haskell
tcE3 (EI2S e1)
  = do
      (e1', t) <- tcE3 e1
      unless (t == TInt) (incompatibleTypes t TInt)
      pure (EI2S e1', TString)
tcE3 (EI2B e1)
  = do
      (e1', t) <- tcE3 e1
      unless (t == TInt) (incompatibleTypes t TInt)
      pure (EI2S e1', TBool)
#+end_src

** Verificação de tipos em L3

 - Definição de variáveis.

\begin{array}{c}
  \dfrac{\Gamma(v) = \bot\:\:\:\:\Gamma \vdash E_1 : T}
        {\Gamma \vdash let\:v : T = E_1 \leadsto \Gamma , v : T}
\end{array}

** Verificação de tipos em L3

- Definição de variáveis

#+begin_src haskell
tcS3 :: S3 -> TcM S3
tcS3 (SLet v t e)
  = do
      v_defined <- isDefinedVar v
      when v_defined (undefinedVar v)
      (e', t') <- tcE3 e
      unless (t == t') (incompatibleTypes t t')
      addDecl v t
      pure (SLet v t e')
#+end_src

** Verificação de tipos em L3

- Atribuição.

\begin{array}{c}
  \dfrac{\Gamma(v) = T\:\:\:\:\Gamma \vdash E_1 : T}
        {\Gamma \vdash v := E_1 \leadsto \Gamma}
\end{array}

** Verificação de tipos em L3

- Atribuição

#+begin_src haskell
tcS3 (SAssign v e)
  = do
      t <- askEnv v
      (e', t') <- tcE3 e
      unless (t == t') (incompatibleTypes t t')
      pure (SAssign v e')
#+end_src

** Verificação de tipos em L3

- Comando read.

\begin{array}{c}
  \dfrac{\Gamma\vdash E_1 : String \:\:\:\:\Gamma(v) = T}
        {\Gamma\vdash read(E_1, v) \leadsto \Gamma}
\end{array}


** Verificação de tipos em L3

- Comando read.

#+begin_src haskell
tcS3 (SRead e v)
  = do
      t <- askEnv v
      (e', t') <- tcE3 e
      unless (t' == TString) (incompatibleTypes TString t')
      pure (SRead e' v)
#+end_src

** Verificação de tipos em L3

- Comando print.

\begin{array}{c}
  \dfrac{\Gamma\vdash E_1 : String}
        {\Gamma\vdash print(E_1) \leadsto \Gamma}
\end{array}

** Verificação de tipos em L3

- Comando print

#+begin_src haskell
tcS3 (SPrint e)
  = do
      (e', t) <- tcE3 e
      unless (t == TString) (incompatibleTypes TString t)
      pure (SPrint e)
#+end_src

* Conclusão

** Conclusão

- Nesta aula apresentamos como implementar a etapa de
  análise semântica em compiladores, usando sistemas de
  tipos como especificação.

